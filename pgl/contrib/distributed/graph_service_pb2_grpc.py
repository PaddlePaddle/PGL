# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from pgl.contrib.distributed import graph_service_pb2 as graph__service__pb2


class GraphServiceStub(object):
    """package = graphservice; 

    The graph service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SampleNeighbors = channel.unary_unary(
                '/GraphService/SampleNeighbors',
                request_serializer=graph__service__pb2.SampleNeighborsRequest.SerializeToString,
                response_deserializer=graph__service__pb2.SampleNeighborsReply.FromString,
                )
        self.NodeBatchIter = channel.unary_stream(
                '/GraphService/NodeBatchIter',
                request_serializer=graph__service__pb2.SampleNodesRequest.SerializeToString,
                response_deserializer=graph__service__pb2.SampleNodesReply.FromString,
                )
        self.NegSampleNodes = channel.unary_unary(
                '/GraphService/NegSampleNodes',
                request_serializer=graph__service__pb2.NegSampleNodesRequest.SerializeToString,
                response_deserializer=graph__service__pb2.NegSampleNodesReply.FromString,
                )
        self.GetNodeFeat = channel.unary_unary(
                '/GraphService/GetNodeFeat',
                request_serializer=graph__service__pb2.GetNodeFeatRequest.SerializeToString,
                response_deserializer=graph__service__pb2.GetNodeFeatReply.FromString,
                )
        self.NodeTypes = channel.unary_unary(
                '/GraphService/NodeTypes',
                request_serializer=graph__service__pb2.NodeTypesRequest.SerializeToString,
                response_deserializer=graph__service__pb2.NodeTypesReply.FromString,
                )


class GraphServiceServicer(object):
    """package = graphservice; 

    The graph service definition.
    """

    def SampleNeighbors(self, request, context):
        """Sends Neighbors 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeBatchIter(self, request, context):
        """Sends Nodes or ScanNodes 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NegSampleNodes(self, request, context):
        """Sample Nodes 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetNodeFeat(self, request, context):
        """Get Node Feat
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NodeTypes(self, request, context):
        """Get Node Types 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GraphServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SampleNeighbors': grpc.unary_unary_rpc_method_handler(
                    servicer.SampleNeighbors,
                    request_deserializer=graph__service__pb2.SampleNeighborsRequest.FromString,
                    response_serializer=graph__service__pb2.SampleNeighborsReply.SerializeToString,
            ),
            'NodeBatchIter': grpc.unary_stream_rpc_method_handler(
                    servicer.NodeBatchIter,
                    request_deserializer=graph__service__pb2.SampleNodesRequest.FromString,
                    response_serializer=graph__service__pb2.SampleNodesReply.SerializeToString,
            ),
            'NegSampleNodes': grpc.unary_unary_rpc_method_handler(
                    servicer.NegSampleNodes,
                    request_deserializer=graph__service__pb2.NegSampleNodesRequest.FromString,
                    response_serializer=graph__service__pb2.NegSampleNodesReply.SerializeToString,
            ),
            'GetNodeFeat': grpc.unary_unary_rpc_method_handler(
                    servicer.GetNodeFeat,
                    request_deserializer=graph__service__pb2.GetNodeFeatRequest.FromString,
                    response_serializer=graph__service__pb2.GetNodeFeatReply.SerializeToString,
            ),
            'NodeTypes': grpc.unary_unary_rpc_method_handler(
                    servicer.NodeTypes,
                    request_deserializer=graph__service__pb2.NodeTypesRequest.FromString,
                    response_serializer=graph__service__pb2.NodeTypesReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'GraphService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GraphService(object):
    """package = graphservice; 

    The graph service definition.
    """

    @staticmethod
    def SampleNeighbors(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GraphService/SampleNeighbors',
            graph__service__pb2.SampleNeighborsRequest.SerializeToString,
            graph__service__pb2.SampleNeighborsReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeBatchIter(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/GraphService/NodeBatchIter',
            graph__service__pb2.SampleNodesRequest.SerializeToString,
            graph__service__pb2.SampleNodesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NegSampleNodes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GraphService/NegSampleNodes',
            graph__service__pb2.NegSampleNodesRequest.SerializeToString,
            graph__service__pb2.NegSampleNodesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetNodeFeat(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GraphService/GetNodeFeat',
            graph__service__pb2.GetNodeFeatRequest.SerializeToString,
            graph__service__pb2.GetNodeFeatReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NodeTypes(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/GraphService/NodeTypes',
            graph__service__pb2.NodeTypesRequest.SerializeToString,
            graph__service__pb2.NodeTypesReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
